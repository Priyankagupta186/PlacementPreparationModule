/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        map<int,int>mp;
        for(int i=0;i<in.size();i++)
        {
              mp[in[i]]=i;
        }
        TreeNode * root=constr(0,pre.size()-1,0,in.size()-1,pre,in,mp);
        return root;

    }
    TreeNode* constr( int pre_st, int pre_end, int in_st, int in_end,vector<int>&pre,vector<int>&in,map<int,int>&mp)
    {
           if(pre_st>pre_end ||in_st>in_end) return NULL;
           TreeNode *root=new TreeNode(pre[pre_st]);
           int ind=mp[pre[pre_st]];
           int el=ind-in_st;
           int er=in_end-ind;
           root->left=constr(pre_st+1,pre_st+el,in_st,ind-1,pre,in,mp);
           root->right=constr(pre_st+el+1,pre_end,ind+1,in_end,pre,in,mp);
           return root;
        }
       

};
